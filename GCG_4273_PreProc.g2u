Program.Sub.ScreenSU.Start
Gui.ReportProcess..Create
Gui.ReportProcess..Caption("Report Process")
Gui.ReportProcess..Size(5025,1815)
Gui.ReportProcess..MinX(0)
Gui.ReportProcess..MinY(0)
Gui.ReportProcess..Position(0,0)
Gui.ReportProcess..BackColor(-2147483633)
Gui.ReportProcess..MousePointer(0)
Gui.ReportProcess..Event(UnLoad,ReportProcess_UnLoad)
Gui.ReportProcess.dtpBeg.Create(DatePicker)
Gui.ReportProcess.dtpBeg.Size(1935,285)
Gui.ReportProcess.dtpBeg.Position(135,435)
Gui.ReportProcess.dtpEnd.Create(DatePicker)
Gui.ReportProcess.dtpEnd.Size(1935,285)
Gui.ReportProcess.dtpEnd.Position(2475,435)
Gui.ReportProcess.lbl1.Create(Label,"Beginning",True,1935,255,0,135,210,True,0,"Arial",8,-2147483633,0)
Gui.ReportProcess.lbl2.Create(Label,"Ending",True,1935,255,0,2475,210,True,0,"Arial",8,-2147483633,0)
Gui.ReportProcess.lbl2.ForeColor(0)
Gui.ReportProcess.cmdPrint.Create(Button)
Gui.ReportProcess.cmdPrint.Size(855,375)
Gui.ReportProcess.cmdPrint.Position(135,915)
Gui.ReportProcess.cmdPrint.Caption("Print")
Gui.ReportProcess.cmdPrint.Event(Click,cmdPrint_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global..BulkDeclareLong(iBIRunID,iBILogID)

Program.Sub.Preflight.End

Program.Sub.Main.Start
'After getting the work orders look at each sequence to determine where time should be applied:
'if work group = 'MOLD', use runtime for Molding, if not in this work group the work center will be checked if equal to: ML01,ML02,ML03,ML04,ML05,ML06,ML07
'if work center = 'DS01', use runtime for Debinding
'if work center = 'ST01' use runtime for Setting
'if not at any of the listed work groups or work centers if LMO = O, use leadtime for external secondaries
'if not at any of the listed work groups or work centers if LMO <> O, use leadtime for internal secondaries

F.Intrinsic.Control.SetErrorHandler("PreProc_Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
F.ODBC.Connection!conx.OpenConnection(V.Ambient.PDSN, V.Ambient.PUser, V.Ambient.PPass)
'(V.Ambient.PDSN, V.Ambient.PUser, V.Ambient.PPass)
'("Global_PLA","Master","Master")

gui.ReportProcess..Show(True)
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("PreProc_Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4273_PreProc.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub(ReportProcess_UnLoad)
Function.Intrinsic.Control.EndIf
Program.Sub.Main.End

Program.Sub.ReportProcess_UnLoad.Start
F.Intrinsic.Control.SetErrorHandler("PreProc_Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
gui.ReportProcess..Visible(false)
F.ODBC.Connection!conx.Close
f.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("PreProc_Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4273_PreProc.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.End

Function.Intrinsic.Control.EndIf
Program.Sub.ReportProcess_UnLoad.End

Program.Sub.cmdPrint_Click.Start
F.Intrinsic.Control.SetErrorHandler("Print_Err")
F.Intrinsic.Control.ClearErrors

V.Local..BulkDeclareString(sError, sMap, sFurnanceHold, sWO_per_Furnace, sHold)
V.Local..BulkDeclareFloat(fLeadTime, fHold, fMold, fDebind, fSetting, fInt_Secondaries, fExt_Secondaries, fTotalHours)
V.Local..BulkDeclareLong(iCounter, iCounterWO_Details, iHold)
v.Local.sSql.Declare(string,"Delete from GCG_4273_FURNACE_RPT")
v.Local.dDateHold.Declare(date)
v.Local.sdate.Declare(String)

'Date check
f.Intrinsic.Control.If(v.Screen.ReportProcess!dtpBeg.Value,>,v.Screen.ReportProcess!dtpEnd.Value)
	f.Intrinsic.UI.Msgbox("Ending Date must be after Beginning Date","Date Configuration")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

F.Intrinsic.UI.InvokeWaitDialog("Starting Process","Report Generation")

Gui.ReportProcess..Visible(False)

'Delete data of previous report
f.ODBC.Connection!conx.Execute(v.Local.sSql)

'Create DataTable for Report
V.Local.sSql.Set("select JOB, SUFFIX, jh.PART, jh.LOCATION, fm.FURNACE, fm.TRAYS_PER_FULL_LOAD, jh.DATE_DUE, jh.QTY_ORDER ")
F.Intrinsic.String.Build("{0} {1}",V.Local.sSql, ", pf.NUM_PARTS_PER_TRAY, fm.TRAYS_PER_FULL_LOAD ", V.Local.sSql) 
F.Intrinsic.String.Build("{0} {1}",V.Local.sSql, " from V_JOB_HEADER jh ", V.Local.sSql) 
F.Intrinsic.String.Build("{0} {1}",V.Local.sSql, " JOIN GCG_4273_PART_FURN pf ON pf.PART = jh.PART and pf.LOC = jh.LOCATION ", V.Local.sSql) 
F.Intrinsic.String.Build("{0} {1}",V.Local.sSql, " JOIN GCG_4273_FURNACE_MNT fm ON fm.FURNACE = pf.FURNACE ", V.Local.sSql)
F.Intrinsic.String.Build("{0} {1} '{2}' and '{3}'",V.Local.sSql, "where DATE_DUE between ",v.Screen.ReportProcess!dtpBeg.Value.PervasiveDate,v.Screen.ReportProcess!dtpEnd.Value.PervasiveDate, V.Local.sSql)
F.Intrinsic.String.Build("{0} {1}",V.Local.sSql, "and DATE_CLOSED = '1900-01-01' ", V.Local.sSql)

F.Data.DataTable.CreateFromSQL("PreProc", "conx", V.Local.sSql , true)
Function.Data.DataTable.AddColumn("PreProc", "FURNACE_DATE", "date")

'This part was added to check if there is a sintering step on the work order, if not remove it from the datatable
f.Intrinsic.Control.For(v.Local.iCounter,0,v.dataTable.Preproc.RowCount--,1)
'	f.Intrinsic.String.Build("select DATE_DUE from JOB_OPERATIONS where PART <> '{0}'","",v.Local.ssql)
	f.Intrinsic.String.Build("select DATE_DUE from JOB_OPERATIONS where PART = '{0}' and JOB = '{1}' AND SUFFIX = '{2}' AND LMO = 'L' AND OPERATION = 'RUN' AND FLAG_CLOSED <> 'Y'","SNTR",v.datatable.PreProc(v.Local.icounter).JOB.fieldvaltrim,V.DataTable.PreProc(V.Local.iCounter).Suffix.fieldvaltrim,v.Local.ssql)
	F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.conx!rst.EOF,=,True)
		f.Data.DataTable.DeleteRow("PreProc",v.Local.iCounter)
	f.Intrinsic.Control.Else
		v.Local.sdate.Set(v.ODBC.conx!rst.FieldValTrim!DATE_DUE)
		f.Intrinsic.String.Format(v.Local.sdate,"##/##/##",v.Local.sdate)
		v.Local.dDateHold.Set(v.Local.sdate)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "FURNACE_DATE",v.Local.dDateHold)
	f.Intrinsic.Control.EndIf
	f.ODBC.conx!rst.Close
f.Intrinsic.Control.Next(v.Local.iCounter)

'Function.Data.DataTable.AddColumn("PreProc", "FURNACE_DATE", "date")
Function.Data.DataTable.AddColumn("PreProc", "NUM_TRAYS", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "FURNACE_LOAD", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "MOLD", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "DEBIND", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "SETTING", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "INT_SECONDARIES", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "EXT_SECONDARIES", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "TOTAL_HOURS", "float", 0)
Function.Data.DataTable.AddColumn("PreProc", "TOTAL_DAYS", "float", 0)

'Loop through Data Table PreProc
f.Intrinsic.Control.For(v.Local.iCounter,0,v.DataTable.PreProc.RowCount--,1)
	'We need to check the row state
	F.Intrinsic.Control.If(V.DataTable.Preproc(V.Local.iCounter).RowState,<>,8)
		'Calculate NUM_TRAYS = QTY_ORDER/NUM_PARTS_PER_TRAY
		f.Intrinsic.Control.If(Variable.DataTable.PreProc(v.Local.iCounter).NUM_PARTS_PER_TRAY!FieldValFloat,<>,0)
			f.Intrinsic.Math.Div(Variable.DataTable.PreProc(v.Local.iCounter).QTY_ORDER!FieldValFloat,Variable.DataTable.PreProc(v.Local.iCounter).NUM_PARTS_PER_TRAY!FieldValFloat,v.Local.fHold)
			Function.Intrinsic.Math.Ceiling(v.Local.fHold, v.Local.iHold)
			f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "NUM_TRAYS", V.Local.iHold)		
		f.Intrinsic.Control.EndIf
		
		'Calculate FURNACE_LOAD = NUM_TRAYS/TRAYS_PER_FULL_LOAD
		f.Intrinsic.Control.If(Variable.DataTable.PreProc(v.Local.iCounter).TRAYS_PER_FULL_LOAD!FieldValFloat,<>,0)
			f.Intrinsic.Math.Div(Variable.DataTable.PreProc(v.Local.iCounter).NUM_TRAYS!FieldValFloat,Variable.DataTable.PreProc(v.Local.iCounter).TRAYS_PER_FULL_LOAD!FieldValFloat,v.Local.fHold)	
			f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "FURNACE_LOAD", V.Local.fHold)		
		f.Intrinsic.Control.EndIf
		
		'For each Work Order (specified by each Job + Suffix), calculate the MOLD, DEBIND, SETTING, INT_SECONDARIES, EXT_SECONDARIES => TOTAL_DAYS
		F.Intrinsic.String.Build("SELECT LMO, PART, HOURS_ESTIMATED, LEAD_TIME from V_JOB_OPERATIONS where JOB = '{0}' and SUFFIX = '{1}'",Variable.DataTable.PreProc(v.Local.iCounter).JOB!FieldValString,Variable.DataTable.PreProc(v.Local.iCounter).SUFFIX!FieldValString,V.Local.sSql)
		F.Data.DataTable.CreateFromSQL("WO_DETAILS", "conx", V.Local.sSql , true)
		v.Local.fMold.Set(0)
		v.Local.fDebind.Set(0)
		v.Local.fSetting.Set(0)
		v.Local.fInt_Secondaries.Set(0)
		v.Local.fExt_Secondaries.Set(0)
		v.Local.fTotalHours.Set(0)
		
		f.Intrinsic.Control.For(v.Local.iCounterWO_Details,0,v.DataTable.WO_DETAILS.RowCount--,1)
			'set the lead time	
			v.Local.fLeadTime.Set(Variable.DataTable.WO_Details(v.Local.iCounterWO_Details).LEAD_TIME!FieldValString)
			
			F.Intrinsic.Control.If(Variable.DataTable.WO_Details(v.Local.iCounterWO_Details).LMO!FieldValString,=,"L")
				'Calculating MOLD time in Hours
				'WORKCENTER or WORKGROUP = MLxx
				f.Intrinsic.String.Left(v.DataTable.WO_Details(v.Local.iCounterWO_Details).PART!FieldValString,2,V.Local.sHold)
				f.Intrinsic.Control.If(V.Local.sHold,=,"ML")
					f.Intrinsic.Math.Add(v.Local.fMold,v.DataTable.WO_Details(v.Local.iCounterWO_Details).HOURS_ESTIMATED!FieldValFloat,v.Local.fMold)					
				F.Intrinsic.Control.ENDIF				
				f.Intrinsic.String.Left(v.DataTable.WO_Details(v.Local.iCounterWO_Details).PART!FieldValString,4,V.Local.sHold)
				f.Intrinsic.Control.If(V.Local.sHold,=,"MOLD")
					f.Intrinsic.Math.Add(v.Local.fMold,v.DataTable.WO_Details(v.Local.iCounterWO_Details).HOURS_ESTIMATED!FieldValFloat,v.Local.fMold)					
				F.Intrinsic.Control.ENDIF
		
				'Calculating SETTING time in hours
				f.Intrinsic.String.Left(v.DataTable.WO_Details(v.Local.iCounterWO_Details).PART!FieldValString,4,V.Local.sHold)
				f.Intrinsic.Control.If(V.Local.sHold,=,"ST01")
					f.Intrinsic.Math.Add(v.Local.fMold,v.DataTable.WO_Details(v.Local.iCounterWO_Details).HOURS_ESTIMATED!FieldValFloat,v.Local.fMold)					
				F.Intrinsic.Control.ENDIF
				
				'Calculating DEBIND time in hours
				f.Intrinsic.String.Left(v.DataTable.WO_Details(v.Local.iCounterWO_Details).PART!FieldValString,4,V.Local.sHold)
				f.Intrinsic.Control.If(V.Local.sHold,=,"DS01")
					f.Intrinsic.Math.Add(v.Local.fSetting,v.DataTable.WO_Details(v.Local.iCounterWO_Details).HOURS_ESTIMATED!FieldValFloat,v.Local.fMold)					
				F.Intrinsic.Control.ENDIF
				
				'internal secondaries will be non setting, debind etc
				f.Intrinsic.Control.If(v.Local.sHold,<>,"DS01")
				f.Intrinsic.Control.AndIf(v.Local.sHold,<>,"ST01")
				f.Intrinsic.Control.AndIf(v.Local.sHold,<>,"ML")
				f.Intrinsic.Control.AndIf(v.Local.sHold,<>,"MOLD")
					F.Intrinsic.Math.Add(V.Local.fInt_Secondaries,v.Local.fLeadTime,v.Local.fInt_Secondaries)
				f.Intrinsic.Control.EndIf
				
			f.Intrinsic.Control.ElseIf(Variable.DataTable.PreProc(v.Local.iCounterWO_Details).LMO!FieldValString,=,"O")
				'Calculate EXT_SECONDARIES
				F.Intrinsic.Math.Add(V.Local.fExt_Secondaries,v.Local.fLeadTime,v.Local.fExt_Secondaries)								
			f.Intrinsic.Control.EndIf	
		f.Intrinsic.Control.Next(v.Local.iCounterWO_Details)
	
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "MOLD",v.Local.fMold)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "DEBIND",v.Local.fDebind)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "SETTING",v.Local.fSetting)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "INT_SECONDARIES",v.Local.fInt_Secondaries)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "EXT_SECONDARIES",v.Local.fExt_Secondaries)
		
		'Calculating TOTAL_HOURS
		F.Intrinsic.Math.Add(V.Local.fMold,V.Local.fDebind,V.Local.fSetting,V.Local.fInt_Secondaries,V.Local.fExt_Secondaries,V.Local.fTotalHours)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "TOTAL_HOURS",v.Local.fTotalHours)
		
		'Calculating TOTAL_DAYS
		F.Intrinsic.Math.Div(V.Local.fTotalHours,8,V.Local.fHold)
		Function.Intrinsic.Math.Ceiling(v.Local.fHold, v.Local.iHold)
		f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "TOTAL_DAYS",v.Local.iHold)
		
		'Calculating FURNACE_DATE
	'	Function.Intrinsic.Date.DateSubtractWorkdays(Variable.DataTable.PreProc(v.Local.iCounter).DATE_DUE!FieldValPervasiveDate, v.Local.iHold, v.Local.dDateHold)
	'	f.Data.DataTable.SetValue("PreProc", v.Local.iCounter, "FURNACE_DATE", V.Local.dDateHold)
		
		'This is a changed added by WAW, customer Kellie Shontz requested the Due Date from the sintering sequence
	
				
		Function.Data.DataTable.Close("WO_DETAILS")	
		v.Local.iCounterWO_Details.Set(0)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(v.Local.iCounter)


'GENERATING REPORT
V.Local..BulkDeclareString(sParam,sVal)
F.Global.BI.GetRunID(V.Global.iBIRunID)
F.Global.BI.StartLogging(V.Global.iBIRunID,-1,-1,"",V.Global.iBILogID)

'Fill BIRUNID
Function.Data.DataTable.AddColumn("PreProc", "BIRUNID", "long", Variable.Global.iBIRunID)

'Save to DataBase
v.Local.sMap.Set("BIRUNID@!@BIRUNID*!*JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*PART@!@PART*!*LOCATION@!@LOCATION*!*FURNACE@!@FURNACE*!*TRAYS_PER_FULL_LOAD@!@TRAYS_PER_FULL_LOAD")
F.Intrinsic.String.Build("{0}{1}",V.Local.sMap,"*!*FURNACE_DATE@!@FURNACE_DATE*!*DATE_DUE@!@DATE_DUE*!*QTY_ORDER@!@QTY_ORDER*!*NUM_TRAYS@!@NUM_TRAYS*!*FURNACE_LOAD@!@FURNACE_LOAD*!*MOLD@!@MOLD", V.Local.sMap)
F.Intrinsic.String.Build("{0}{1}",V.Local.sMap,"*!*DEBIND@!@DEBIND*!*SETTING@!@SETTING*!*INT_SECONDARIES@!@INT_SECONDARIES*!*EXT_SECONDARIES@!@EXT_SECONDARIES*!*TOTAL_HOURS@!@TOTAL_HOURS*!*TOTAL_DAYS@!@TOTAL_DAYS", V.Local.sMap)
Function.Data.DataTable.SaveToDB("PreProc", "conx", "GCG_4273_FURNACE_RPT", "JOB*!*SUFFIX",256, v.Local.sMap)
f.Data.DataTable.Close("PreProc")

'Stop Logging
F.Global.BI.StopLogging(V.Global.iBILogID)
V.Local.sVal.Set(V.Global.iBIRunID)
V.Local.sParam.Set("BIRUNID")

'Print the Report
F.Global.BI.RunReportPreProcessor(V.Global.iBIRunID,V.Global.iBILogID,V.Local.sParam,V.Local.sVal,"",-1,True,"",-1,"",-1,"","",V.Global.iBIRunID)
						 
f.Intrinsic.UI.CloseWaitDialog
f.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Print_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4273_PreProc.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.End

Function.Intrinsic.Control.EndIf
Program.Sub.cmdPrint_Click.End

Program.Sub.Comments.Start
${$0$}$$}$$}$12/20/2016 9:43:03 AM$}$False
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This was coded by FEQ on December 2016. It adds a screen to the script 1 button on the inventory master screen to save furnace information to parts, as well as a screen to add a furnace to a work order on the work order header screen
Program.Sub.Comments.End